import sys
import pandas as pd
from docx.enum.text import WD_ALIGN_PARAGRAPH


class tableReporting:

    def __init__(self, cusTable, settings):
        # Getting Customized [Table Reporting] Block Settings!
        allKeys = list(cusTable.keys())
        if "title" in allKeys:
            self.title = cusTable['title']
        else:
            self.title = settings['tableReporting']['title']

        # Use Previous Results for This Section
        if "usePrevResults" in allKeys:
            self.usePrevResults = cusTable['usePrevResults']
        else:
            self.usePrevResults = settings['tableReporting']['usePrevResults']

        # Excel File Selection
        if "excel" in allKeys:
            self.excel = cusTable['excel']
        else:
            self.excel = settings['tableReporting']['excel']

        # SHEET Selection
        if "sheet" in allKeys:
            self.sheet = cusTable['sheet']
        else:
            self.sheet = settings['tableReporting']['sheet']

        # Table Columns Selection:
        if "columns" in allKeys:
            self.columns = cusTable['columns']
        else:
            self.columns = settings['tableReporting']['columns']

        # System Prompts are Added (NOT REPLACED)!
        if "systemPrompts" in allKeys:
            self.systemPrompts = cusTable['systemPrompts'] + settings['tableReporting']['systemPrompts']
        else:
            self.systemPrompts = settings['tableReporting']['systemPrompts']
        # User Prompts are Added (NOT REPLACED)!
        if "userPrompts" in allKeys:
            self.userPrompts = cusTable['userPrompts'] + settings['tableReporting']['userPrompts']
        else:
            self.userPrompts = settings['tableReporting']['userPrompts']

        self.settings = settings
        self.gptModel = settings["openAI"]["model"]
        self.apiPrompt = []
        self.chatGPTResponse = ""
        self.table = pd.DataFrame()

    # Convert Table to CSV format for Chat-GPT
    def convertTableReporting(self, table):
        aTable = table.copy(deep=True)
        # Adding The First Row Of TABLE!
        textTable = "\n \n Table: [ \n"
        for col in aTable.columns:
            textTable = textTable + col + ','
        textTable = textTable + " \n "

        for row in range(len(aTable.index)):
            for col in aTable.columns:
                textTable = textTable + str(aTable[col].iloc[row]) + ','
            textTable = textTable + " \n "

        textTable = textTable + "] \n"
        return textTable

    # Generating The Text Prompt for The Table!
    def generateTablePrompts(self, excelManager):
        self.table = self.requestingTable(excelManager)
        txtTable = self.convertTableReporting(self.table)

        # Taking The Table Prompt First!
        systemPrompt = ""
        for prompt in self.systemPrompts:
            systemPrompt = systemPrompt + prompt + " \n "

        # Getting The Target Company Details!
        systemPrompt = systemPrompt + " \n Target Company: \n"
        for key in self.settings['target']:
            systemPrompt = systemPrompt + key + ": " + self.settings['target'][key] + "\n"

            # Getting The Report Generator Company!
        systemPrompt = systemPrompt + " \n Report Generated by Company: \n"
        for key in self.settings['generator']:
            systemPrompt = systemPrompt + key + ": " + self.settings['generator'][key] + "\n"

            # Getting The Details on Table Columns!
        systemPrompt = systemPrompt + " \n Detail on Table Columns: \n" + self.settings['tableInfo']['prompt'] + " \n "
        for col in self.columns:
            if col in list(self.settings['tableInfo'].keys()):
                systemPrompt = systemPrompt + col + ": " + self.settings['tableInfo'][col] + " \n "

        # Getting The Table Prompts
        systemPrompt = systemPrompt + " \n " + txtTable

        # Generating The User Prompt
        userPrompt = ""
        for line in self.userPrompts:
            userPrompt = userPrompt + line + "\n"

        apiMessage = [
            {"role": "system", "content": systemPrompt},
            {"role": "user", "content": userPrompt},
        ]
        self.apiPrompt = apiMessage
        return apiMessage

    # This function should return selected requested Columns of the Table!
    def requestingTable(self, excelManager):
        table = excelManager.requestSheet(self.excel, self.sheet)
        # CHECK IF THE TABLE HAS ALL OF THE REQUIRED COLUMNS!!!
        for reqColumn in self.columns:
            found = False
            for col in table.columns:
                if col == reqColumn:
                    found = True
                    continue
            if not found:
                print("Some Columns Missing in the Table")
                print(f" This column:{reqColumn} is missing from the table")
                print("Program Terminating")
                sys.exit()

        # returning The Requested Table Columns!
        return table[self.columns]


    def analyzeGPT(self, client):

        if self.apiPrompt == []:
            print("The System Prompt for CHAT-GPT is Empty, Table ANALYSIS")
            print("CHECK analyzeGPT function of tableAnalysis")
            print("Program Terminating!!!")
            sys.exit()

        chat_completion = client.chat.completions.create(messages=self.apiPrompt, model=self.gptModel)
        self.chatGPTResponse = chat_completion.choices[0].message.content
        return self.chatGPTResponse


    def generateReport(self, document):

        document.add_heading(self.title, 2)

        # Writing The Paragraphs
        splitParas = self.chatGPTResponse.split("\n")

        for para in splitParas:
            paragraph = document.add_paragraph(para)
            paragraph.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY

        t = document.add_table(self.table.shape[0] + 1, self.table.shape[1], style="Medium Grid 1 Accent 1")

        # add the header rows.
        for j in range(self.table.shape[-1]):
            t.cell(0, j).text = self.table.columns[j]

        # add the rest of the data frame
        for i in range(self.table.shape[0]):
            for j in range(self.table.shape[-1]):
                t.cell(i + 1, j).text = str(self.table.values[i, j])

    def getTitle(self):
        return self.title

    def getChatGPTResponse(self):
        return self.chatGPTResponse
